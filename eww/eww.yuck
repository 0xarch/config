(defwindow bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "35px"
                               :anchor "top center")
	:stacking "fg"
	:reserve (struts :distance "16px" :side "top")
	:windowtype "dock"
	:wm-ignore false
	:exclusive true
	:focusable false
	(labeled-container :name "Main")
)
(defvar data-visible true)
(defpoll time :interval "1s" :initial "initial value" :run-while data-visible
'date +%H:%M:%S')
(defpoll weather :interval "1200s" :initial "None" :run-while data-visible
'./infos -w')
(defpoll sound :interval "60s" :initial 50 :run-while data-visible
'./sound')
(defpoll memory :interval "5s" :initial "Ukn" :run-while data-visible
'./hardware -m')
(defpoll temprt :interval "5s" :initial "Ukn" :run-while data-visible
'./hardware -t')
(defpoll workspace :interval "60s" :initial "[1]" :run-while data-visible
'./window -s')
(defpoll battery :interval "15s" :initial "initial value" :run-while data-visible
'./hardware -b')
(defpoll wifi :interval "15s" :initial "None" :run-while data-visible
'./wifi')
(defpoll xwayland :interval "60s" :initial "Unknown" :run-while data-visible
'./window -x')
(defpoll floating :interval "60s" :initial "U" :run-while data-visible
'./window -f')
(defpoll backlight :interval "60s" :initial 50 :run-while data-visible
'./backlight')
(defwidget labeled-container [name] 
	(box :class "container"
	(left-container)
	(center-container)
	(right-container)
	))
(defwidget right-container []
	(box :class "container"
	(control)
	(right-children)
	))
(defwidget left-container []
	(box :class "container"
	workspace
	memory
	temprt
	floating
	weather
))
(defwidget center-container []
	(box :class "container"
	(docks)
))
(defwidget right-children []
	(box :class "container"
	wifi
	battery
	time
))
(defwidget control []
	(box :class "container"
	(sysctlWidget)
	(soundWidget)
	(backlightWidget)
))
(defwidget docks []
	(box :class "container"
	(button :onclick "wezterm" "")
	(button :onclick "exec icalingua" "")
	(button :onclick "exec netease-cloud-music" "")
	(button :onclick "geany %u" "")
	(button :onclick "./exc hmcl-new" "")
	(button :onclick "exec /opt/ksp/AppRun" "")
	(button :onclick "exec /opt/bsg/AppRun" "")
	(button :onclick "exec wps" "")
        (button :onclick "exec et" "")
        (button :onclick "exec wpp" "")
))
(defwidget windowInfoWidget []
	(box	:orientation "horizontal"
		:halign "center"
	(button :onclick "./windowinfo_update" "")
	xwayland
))
(defwidget sysctlWidget []
	(box	:orientation "horizontal"
		:halign "center"
	(button :onclick "systemctl suspend" "⏾")
	(button :onclick "systemctl poweroff" "")
	(button :onclick "systemctl reboot" "")
))
(defwidget soundWidget []
	(box   :orientation "horizontal"
		:halign "center"
	""
	(scale :value sound :draw-value true :onchange "amixer -c 1 set Master {}%;eww update sound=$(./sound)")
))

(defwidget backlightWidget []
        (box    :orientation "horizontal"
                :halign "center"
        ""
	(scale :value backlight :draw-value true :onchange "brightnessctl s {}%;eww update backlight=$(./backlight)")
))

